ESSENCIAL:
    AFIM DE MANTER O CÓDIGO FUNCIONANTE DEVEMOS SEMPRE SEM EXEÇÕES CRIAR UMA NOVA BRANCH PARA EDITAR E ADICIONAR NOVAS 
    FUNCIONALIDADES OU CORREÇÕES, ISSO PERMITE QUE TENHAMOS SEMPRE A VERSÃO ANTERIOR DO CÓDIGO QUE POSSÍVELMENTE AINDA 
    FUNCIONAVA, AO FIM DO JOGO EU FAREI O MERGE DAS BRANCHS QUE FOREM NECESSÁRIAS, NÃO SE ESQUEÇAM DE ATUALIZAR O PULL 
    DO DIRETÓRIO PARA EVITAR MAIORES CONFLITOS DE CÓDIGO.



    Para editar o código é necessário a instalação e configuração da lib Allegro5 e do compilador mingw gcc-gpp para que 
    possa gerar executável do jogo, até o presente momento só foi possível testar as alterações desta forma.
    Explicarei logo como configurar.

    O jogo funciona a partir do terminal.bat, enquanto estiver desenvolvendo terá que entrar no explorador de arquivos para
    executar o arquivo terminal.bat, faça isso a cada alteração no código para que a máquina crie um arquivo binário e o exe 
    posteriormente(automatizado o processo), para o código foi criado unico e exclusivamente(por conta do terminal) um arquivo
    main.c, onde fica o código do jogo em si.

    CONFIGURANDO AS BIBLIOTECAS:
        Dentro do diretório jogo-gobblet-gobblers existem duas pastas que foram escolhidas a dedo por mim(a que melhor atendia 
        windows e para utilização do comando gcc), copie as pastas allegro e mingw64 (não retire as pastas do diretório atual, 
        apenas copie) e as cole em C:, devem ser colocadas na raiz por que serão utilizadas no PATH do sistema, após colar 
        aperte o botão do windows, digite variaveis de ambiente e pressione enter, procure pelo botão variaveis de ambiente,
        na lista de baixo selecione Path, editar e novo, digite C:\mingw64\bin, isso irá adicionar ao sistema a função gcc, a 
        mesma utilizada no Dev C++, pressione OK até que não apareça mais, feche as abas, salve suas tarefas abertas e reinicie
        a máquina.
        Pronto, as bibliotecas estão configuradas


COMO FUNCIONA CADA ARQUIVO(caso queira as informações):
    A pasta allegro contém bibliotecas de execução(lib e bin) e arquivos de cabeçalho((incude) um link para um arquivo C assim como
    no #include <stdio.h>), sua função é se comunicar com o pc para criar os gráficos

    A pasta mingw64 contém o mesmo que o allegro porém sua função é se comunicar com os arquivos e conecta-los para sua compilação
    ele também cria o arquivo binário main.o e o exe(apartir do terminal.bat)

    A pasta assets guarda os arquivos .ttf(true type font) baixados do google fonts, esses arquivos serão carregados no main sempre
    que for necessário escrever caracteres no display do jogo

    O arquivo allegro_monolith-5.2.dll vem junto com o pacote allegro, dentro de bin, esse arquivo une todos os arquivos dll em um
    só para sua chamada(foi copiado e colado na raiz e deve continuar lá para funcionar), 
    O arquivo liballegro_monolith.dll.a tem a mesma função mas para os arquivos da pasta lib(também foi copiado e deve permanecer)

    OS DEMAIS ARQUIVOS:
    O terminal.bat chama o gcc(mingw64) para enviar a biblioteca allegro para o arquivo main.c e compila-lo, criando com a flag -c
    o arquivo binário main.o, assim o gcc noamente é chamado para enviar com a flag -I o local dos cabeçalhos da biblioteca allegro
    criando com a flag -o(output) o arquivo executavel jogo-gobblet-gobblers.exe, assim é passado como parametro o monolith com os
    arquivos de execução para identificar a biblioteca allegro5/, após é chamado o arquivo.exe para ser executádo dando vida aos 
    gráficos



VERSÃO 3.0:
    A versão 3.0 veio para criar e organizar com a biblioteca allegro5 gráficos do jogo dentro de funções void que podem ser chamadas 
    pelo nome passando como um parâmetro um valor de 1 a 3(a força/tamanho das figuras), cada função contém 3 tamanhos de figura com
    um número ao centro(ajustar a localização), quando chamada desenha a figura com o valor passado para o switch case(valor_forca),
    também implementei um limpador de tela, recebe um parâmetro inteiro de 1 a 9 que corresponde a 1(superior esquerdo) 2(meio
    esquerdo)... a função não limpa de fato, ela desenha em cima da localização selecionada a mesma cor do tabuleiro, não encontrei
    outra forma de "apagar" para substituir, como o jogo é pequeno não vejo problemas nisso, a cada fim de função também foi
    adicionado um al_flip_display() que simplesmente pega a tela antiga e adiciona as novas informações, coloquei o # em uma
    função void chamada sharp para quando necessitar da limpeza da tela toda com o al_clear_to_color possa chamar o tabuleiro
    novamente quando quiser.


VERSÃO 3.1:
    Cria o menu do jogo com as funções de telas para jogar, os creditos e instruções de jogo, também foi adicionado leitura de 
    teclas para entrar e sair dos menus escolhidos e fechar o jogo com esc, incluindo as informações das instruções e créditos

VERSÃO 3.2:
    Precisa ser criado o backend do jogo mas pra isso primeiro temos que saber como será a entrada de informações, o allegro não 
    tem inputbox então teria que utilizar algo como leitura de teclas e fazer a verificação de confirmação por enter por exmplo
    também vi que(não sei se tem mesmo) uma função que rastreia o mouse mas não sei como funcionaria, de qualquer forma acredito 
    que tenha que utilizar algo como event_queue, depois de validar as entradas do usuário é só fazer uma verificação de se O
    lugar o qual ele escolheu esta disponível ou se pode colocar uma peça mais forte, depois da verificação é só chamar a função
    desejada de desenho(o jogo fará) e limpeza.

VERSÃO 3.3:
    Implementa uma verificação de vencedor, um placar, score e se necessário correção de erros.
